https://troywu0.gitbooks.io/interview/content/java_collection.html

主要接口及其继承关系如下：
SortedSet  -->  Set --> Collection -->  Iterable
List  -->  Collection  -->  Iterable
SortedMap  -->  Map

常用类及其继承关系如下：
HashSet/LinkedHashSet  --> Set
TreeSet  -->  SortedSet  --> Set
ArrayList/LinkedList  -->  List
HashMap  -->  Map
TreeMap  -->  SortedMap  -->  Map

List Set Map
ArrayList LinkedList
HashSet   LInkedHashSet  SortedSet-->HashMap
TreeSet LInkedinHashmap  SortMap-->TreeMap  	WeakHashMap
Properties-->Hashtable --> Dictory

Hashtable与 HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。
LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。
TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。

一般情况下，我们用的最多的是HashMap,HashMap里面存入的键值对在取出的时候是随机的,它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度。在Map 中插入、删除和定位元素，HashMap 是最好的选择。
TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。
LinkedHashMap 是HashMap的一个子类，如果需要输出的顺序和输入的相同,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。


Hashtable和HashMap，他们都实现了Map接口；Hashtable继承自古老的抽象类Dictionary，是线程安全的；HashMap继承自较新的抽象类AbstractMap，不是线程安全的。
HashMap允许null的键和值，而Hashtable不允许null的键和值，这是因为：
Hashtable有方法contains方法（判断是否存在值），如果允许的话，则不论key或者value为null，都会返回null，这容易误解，所以Hashtable就强制限制了，对于null 键和值，直接抛出NullPointerException；
HashMap没有contains方法，分别是containsKey()和containsValues()。
LinkedHashMap ，重写了HashMap的迭代器、AddEntry、Entry等几个方法和类，用一个双向链表存储元素加入的顺序；这可以按照访问顺序排序，最近访问的元素（get/put），会被放在链表的末尾，这是LRU算法（Least Recenty Used），最近最少使用算法。

关于ArrayList和LinkedList，ArrayList是基于数组的，这种方式将对象放在连续的位置中，读取快，但是容量不足时需要进行数组扩容，性能降低，插入和删除也慢；LinkedList是基于链表的，插入和删除都快，但是查找麻烦，不能按照索引查找。所以说，对于构造一个队列是用ArrayList或者LinkedList，是根据性能和方便来考虑的，比如LinkedList有removeLast()，ArrayList只能remove(index)
CopyOnWriteArrayList类最大的特点就是，在对其实例进行修改操作（add/remove等）会新建一个数据并修改，修改完毕之后，再将原来的引用指向新的数组



=============================
https://blog.csdn.net/xlgen157387/article/details/79863301


Arrays.sort
数组长度 <47 插入排序
<286   DualPivotQuicksort 双轴快速排序
>286  连续性好   归并排序
>286  连续性不好  双轴快速排序 


Collections.sort()的排序算法
legacyMergeSort			归并
TimSort的排序算法