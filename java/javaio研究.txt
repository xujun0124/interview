Java流总结


一、 流的分类

• 按数据流动方向

– 输入流：只能从中读取字节数据，而不能向其写出数据

– 输出流：只能向其写入字节数据，而不能从中读取数据

• 按照流所处理的数据类型

– 字节流：用于处理字节数据。

– 字符流：用于处理Unicode字符数据。

• 按照流所处理的源

– 节点流:从/向一个特定的IO设备读/写数据的流。（低级流）

– 处理流:对已存在的流进行连接和封装的流。（高级流）

二、 缓冲流

• 缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓

冲的功能，提高了读写的效率，同时增加了一些新的方法。

• J2SDK提供了四种缓存流：

– BufferedReader

– BufferedWriter

– BufferedInputStream s

– BufferedOutputStream

 

 

• 缓冲输入流支持其父类的mark()和reset()方法：

– mark()用于“标记”当前位置，就像加入了一个书签，可以使用reset()方法返回这个标记重新读取数据。

• BufferedReader提供了readLine()方法用于读取一行字符串（以\r或\n分隔）。

• BufferedWriter提供了newLine()用于写入一个行分隔符。


• 对于输出的缓冲流，写出的数据会先在内存中缓存，使用flush()方法将会使内存中的数据立刻写出。





说明：

1. 字节流用于读写诸如图像数据之类的原始字节流。

2. 字符流用于读写诸如文件数据之类的字符流。

3. 低级流能和外设交流。

4. 高级流能提高效率。

5. InputStreamReader 是字节流通向字符流的桥梁。

6. OutputStreamWriter是字符流通向字节流的桥梁。





http://www.cnblogs.com/wangyuyu/p/3167318.html

https://yq.aliyun.com/articles/72013


ava.io包中最重要的就是5个类和一个接口。5个类指的是File、OutputStream、InputStream、Writer、Reader；一个接口指的是Serializable。掌握了这些就掌握了Java I/O的精髓了。

Java I/O主要包括如下3层次：

流式部分——最主要的部分。如：OutputStream、InputStream、Writer、Reader等
非流式部分——如：File类、RandomAccessFile类和FileDescriptor等类
其他——文件读取部分的与安全相关的类，如：SerializablePermission类，以及与本地操作系统相关的文件系统的类，如：FileSystem类和Win32FileSystem类和WinNTFileSystem类。
主要类如下：

File（文件特征与管理）：用于文件或者目录的描述信息，例如生成新目录，修改文件名，删除文件，判断文件所在路径等。
InputStream（字节流，二进制格式操作）：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。
OutputStream（字节流，二进制格式操作）：抽象类。基于字节的输出操作。是所有输出流的父类。定义了所有输出流都具有的共同特征。
Reader（字符流，文本格式操作）：抽象类，基于字符的输入操作。
Writer（字符流，文本格式操作）：抽象类，基于字符的输出操作。
RandomAccessFile（随机文件操作）：它的功能丰富，**可以从文件的任意位置进行存取（输入输出）操作**。


I/O流
java.io包里有4个基本类：InputStream、OutputStream及Reader、Writer类，它们分别处理字节流和字符流。

其他各种各样的流都是由这4个派生出来的。

I/O流

按来源/去向分类：

File（文件）： FileInputStream, FileOutputStream, FileReader, FileWriter 
byte[]：ByteArrayInputStream, ByteArrayOutputStream 
Char[]: CharArrayReader, CharArrayWriter 
String: StringBufferInputStream, StringReader, StringWriter 
网络数据流：InputStream, OutputStream, Reader, Writer 
InputStream
InputStream 为字节输入流，它本身为一个抽象类，必须依靠其子类实现各种功能，此抽象类是表示字节输入流的所有类的超类。 继承自InputStream 的流都是向程序中输入数据的，且数据单位为字节（8bit）；

InputStream是输入字节数据用的类，所以InputStream类提供了3种重载的read方法.Inputstream类中的常用方法：

public abstract int read( )：读取一个byte的数据，返回值是高位补0的int类型值。若返回值=-1说明没有读取到任何字节读取工作结束。
public int read(byte b[ ])：读取b.length个字节的数据放到b数组中。返回值是读取的字节数。该方法实际上是调用下一个方法实现的
public int read(byte b[ ], int off, int len)：从输入流中最多读取len个字节的数据，存放到偏移量为off的b数组中。
public int available( )：返回输入流中可以读取的字节数。注意：若输入阻塞，当前线程将被挂起，如果InputStream对象调用这个方法的话，它只会返回0，这个方法必须由继承InputStream类的子类对象调用才有用，
public long skip(long n)：忽略输入流中的n个字节，返回值是实际忽略的字节数, 跳过一些字节来读取
public int close( ) ：使用完后，必须对我们打开的流进行关闭。
来看看几种不同的InputStream：

FileInputStream把一个文件作为InputStream，实现对文件的读取操作
ByteArrayInputStream：把内存中的一个缓冲区作为InputStream使用
StringBufferInputStream：把一个String对象作为InputStream
PipedInputStream：实现了pipe的概念，主要在线程中使用
SequenceInputStream：把多个InputStream合并为一个InputStream
OutputStream
OutputStream提供了3个write方法来做数据的输出，这个是和InputStream是相对应的。 
　　

public void write(byte b[ ])：将参数b中的字节写到输出流。
public void write(byte b[ ], int off, int len) ：将参数b的从偏移量off开始的len个字节写到输出流。
public abstract void write(int b) ：先将int转换为byte类型，把低字节写入到输出流中。
public void flush( ) : 将数据缓冲区中数据全部输出，并清空缓冲区。
public void close( ) : 关闭输出流并释放与流相关的系统资源。
几种不同的OutputStream：

ByteArrayOutputStream：把信息存入内存中的一个缓冲区中
FileOutputStream：把信息存入文件中
PipedOutputStream：实现了pipe的概念，主要在线程中使用
SequenceOutputStream：把多个OutStream合并为一个OutStream
Reader和InputStream类似；Writer和OutputStream类似。

有两个需要注意的：

InputStreamReader ： 从输入流读取字节，在将它们转换成字符。
BufferReader :接受Reader对象作为参数，并对其添加字符缓冲器，使用readline()方法可以读取一行。
如何选择I/O流
确定是输入还是输出 输入:输入流 InputStream Reader 输出:输出流 OutputStream Writer
明确操作的数据对象是否是纯文本 是:字符流 Reader，Writer 否:字节流 InputStream，OutputStream
明确具体的设备。
文件： 读：FileInputStream,, FileReader, 写：FileOutputStream，FileWriter
数组： byte[ ]：ByteArrayInputStream, ByteArrayOutputStream char[ ]：CharArrayReader, CharArrayWriter
String： StringBufferInputStream(已过时，因为其只能用于String的每个字符都是8位的字符串), StringReader, StringWriter
Socket流 键盘：用System.in（是一个InputStream对象）读取，用System.out（是一个OutoutStream对象）打印
是否需要转换流 是，就使用转换流，从Stream转化为Reader、Writer：InputStreamReader，OutputStreamWriter
是否需要缓冲提高效率 是就加上Buffered：BufferedInputStream, BufferedOuputStream, BufferedReader, BufferedWriter
是否需要格式化输出

