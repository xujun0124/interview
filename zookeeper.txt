概述
zk是一个分布式协调服务的开源框架，属于CAP中的AP
本身就是一个分布式小文件存储系统。
特点：
	• 全局一致性
	• 可靠性
	• 顺序性
	• 数据更新原子性
	• 实时性
集群角色
	• leader：对于create, setData, delete等有写操作的请求，需要统一转发给leader处理，leader需要决定编号、执行操作，这个过程称为一个事务
		○ zookeeper集群工作的核心
		○ 事务（写操作）请求的唯一调度和处理者，保证集群事务处理的顺序性
		○ 集群内各服务器的调度者
	• follower
		○ 处理客户端的非事务（读操作）请求
		○ 转发事务请求给leader
		○ 参与集群leader选举投票
	• observer: 对于访问量比较大的zookeeper集群，可以增加Observer角色
		○ 观察集群的最新状态变化并将这些状态同步过来
		○ 对于非事务请求可以独立处理，对于事务请求则转发给leader处理
		○ 不提供任何形式的投票只提供非事务服务，用于提升集群的非事务处理能力

znode数据模型
znode: zookeeper节点，具有以下特点
	• znode兼具文件和目录两种特点：保存数据和路径访问
	• znode具有原子性操作
	• znode存储数据有大小限制：以kb为单位，一般几十kb
	• znode通过路径索引：斜杠开头的绝对路径
由3个部分组成
	• stat: 状态信息，描述该znode的版本、权限等信息
	• data:与该znode关联的数据
	• children: 该znode下的子节点
znode的节点属性
	• dataVersion: 数据版本号，每次对节点set则+1
	• cversion: 子节点版本号，每次子节点变化则+1
	• aclVersion: ACL的版本号
	• cZxid: znode创建的事务id
	• mZxid: znode被修改的事务id，每次变化都会产生唯一zxid
	• ctime: 节点创建的时间戳
	• mtime: 节点最新一次更新发生的时间戳
	• emphemeralOwner: 如果该节点为临时节点，则值为session id, 否则为0
znode的节点类型
	• 临时节点：生命周期依赖于创建他们的会话，一旦会话结束则临时节点将被自动删除（断开后需要等几秒才会删除，当然另外也可手动删除），临时节点不允许拥有子节点
	• 永久节点：生命周期不依赖于会话，只有客户嫌显示执行删除才能被删除
znode还有序列化的特性，节点名字后面会自动追加一个不断增加的10位数字的序列号。该序列号对父节点是唯一的，用来记录每个子节点创建的先后顺序。这样遍存在四种类型的znode:
	> PERSISTENT: 永久节点
	> EPHEMERAL: 临时节点
	> PERSISTENT_SEQUENTIAL: 永久节点、序列化
	> EPHEMERAL_SEQUENTIAL: 临时节点序列化

zookeeper选举机制：确定leader和follower
默认算法：FastLeaderElection -> 投票数大于半数则胜出
	• 服务器id：myid, 编号越大算法中权重越大
	• 选举状态
		○ looking：竞选状态
		○ following：随从状态，同步leader状态，参与投票
		○ observing：观察状态，同步leader状态，不参与投票
		○ leading: 领导状态
	• 数据id：最新数据version，编号越大数据越新，算法中权重越大
	• 逻辑时钟：投票的次数，从0开始递增，同一轮投票过程中的逻辑时钟是相同的，每投完一次票这个数据就会增加。
全新集群的选举（主要参加服务器id）
	1. 每个机器都给自己投票
	2. 投票数过半选举结束
非全新集群的选举（加入了数据id，服务器id和逻辑时钟）
	1. 逻辑时钟小的选举结果被忽略，重新投票
	2. 统一逻辑时钟后，数据id大的胜出
数据id相同的情况下，服务器id大的胜出
