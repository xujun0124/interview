1 hibernate ,mybatis 区别 ?   hibernate sql 查询慢,如何处理? 数据量很大怎么办? hibernate 生成的sql慢如何办?
2 多线程, hashmap数据结构. 存储一个key,value的过程? 散列桶相同的值如何处理?
3 concurrenthashmap和hashmap的区别? 有哪些提高?  和hashtable的区别?
4 创建线程池有哪些方式? threadpool 的创建方法, 有哪些参数, 工作机制. exception 默认抛出有哪些方式? 什么情况check max size? 用哪种workingqueue?  worksize多大? 
5 怎样保证线程安全? sync的用法有哪些?  放在静态和非静态有什么不同?  用在代码块上?  threadlocal的作用? 使用需要注意什么?
6 notify, sleep, wait 的区别?
7 arraylist 和vector的区别? linkedlist?
8 hashmap 默认容量, 扩容机制.
9,微服务用什么技术? spring cloud你了解吗?  服务注册发现用什么技术? 架构? 如何注册,如何消费?  如何查询服务? 容断的原理?
10 消息如何保证不丢失?
11. try catch, finally主要做什么事情?
12  为什么会发生OOM?  如何找到root cause? 什么叫内存泄漏? 什么场景?
13  ReentrantLock是如何实现的? 什么叫同位锁? 什么是AQS,实现原理?  CAS是如何处理的?
14 JVM 模型? 线程的变量分配在哪里?  GC的机制熟悉吗?







synchronized关键字和Lock的实现类都是悲观锁

乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。


所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。

无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。

偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。


轻量级锁是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。

升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。




公平锁 VS 非公平锁

ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁

公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。
该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。






可重入锁 VS 非可重入锁

Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。


JDK中的synchronized和JUC中Lock的实现类就是互斥锁

独享锁与共享锁也是通过AQS来实现的